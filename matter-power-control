#!/usr/bin/env python3
#
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Set up and control Matter power strips.

See "matter-power-control --help" for commands, and
"matter-power-control command --help" for details on each command.
"""


import argparse
import re
import subprocess
import sys
import time

import cv2


# Examples:
# [1751413876.645] [149047:149047] [SPL] Long discriminator:  1234   (0x4d2)
# [1751413876.645] [149047:149047] [SPL] Passcode:            12345678
FIELD_MATCH = re.compile(r'\[.*?\] \[.*?\] \[.*?\] (.*?): +([^ \x1b]+)')
DISCRIMINIATOR_FIELD = 'Long discriminator'
PASSCODE_FIELD = 'Passcode'

# This module itself, passed to first_line_docs for argparse.
THIS_MODULE = sys.modules[__name__]


# Stores setup data for a Matter power strip.
class SetupData(object):
  # A built-in identifier for an individual device.
  discriminator: int
  # A passcode for pairing the device and changing its settings.
  passcode: int

  def __init__(self):
    self.discriminator = None
    self.passcode = None

  def valid(self) -> bool:
    return self.discriminator is not None and self.passcode is not None

  def __repr__(self) -> str:
    return 'Discriminator: {}, Passcode: {}'.format(
        self.discriminator, self.passcode)


# Parse a QR code image, like the ones used for Matter setup.
def read_qr(input_path: str) -> str:
  image = cv2.imread(input_path)
  decoder = cv2.QRCodeDetector()
  retval, decoded_info, _, _ = decoder.detectAndDecodeMulti(image)
  if not retval:
    raise RuntimeError('Failed to parse QR code!')

  return decoded_info[0]


# Parse the Matter setup payload, which was encoded in the QR code.
def parse_setup_payload(setup_payload: str) -> SetupData:
  proc = subprocess.run([
    'chip-tool',
    'payload',
    'parse-setup-payload',
    setup_payload,
  ], stdin=subprocess.DEVNULL, stdout=subprocess.PIPE)

  output = proc.stdout.decode('utf-8')

  if proc.returncode:
    print(output)
    raise RuntimeError('Setup data QR code not valid.')

  # Extract the discriminator and passcode from the output of chip-tool.
  lines = output.split('\n')
  setup_data = SetupData()
  for line in lines:
    match = FIELD_MATCH.search(line)
    if match:
      field = match.group(1)
      value = match.group(2)
      if field == DISCRIMINIATOR_FIELD:
        setup_data.discriminator = int(value)
      elif field == PASSCODE_FIELD:
        setup_data.passcode = int(value)

  if not setup_data.valid():
    print(output)
    raise RuntimeError('Could not find expected output from parser.')

  return setup_data


def read_and_parse_qr(args) -> SetupData:
  # Extract setup data from the QR code.
  if args.qr_text:
    setup_payload = args.qr_text
    return parse_setup_payload(setup_payload)

  setup_payload = read_qr(args.qr)
  print('Parsed QR text:', setup_payload)
  return parse_setup_payload(setup_payload)


def setup_command(args):
  """Set up a Matter power strip using a QR.  Power cycle right before this."""

  setup_data = read_and_parse_qr(args)

  # Use chip-tool to pair with the device and put it on the WiFi.
  proc = subprocess.run([
    'chip-tool',
    'pairing',
    'ble-wifi',
    args.id,
    args.ssid,
    args.password,
    str(setup_data.passcode),
    str(setup_data.discriminator),
    '--bypass-attestation-verifier', 'true',
  ])

  if proc.returncode:
    raise RuntimeError('Setup process failed. Try restarting the device first.')


def change_power(device_id, outlet, on_or_off):
  """Change the state of an outlet and throw on failure."""

  subprocess.check_call([
    'chip-tool',
    'onoff',
    on_or_off,
    device_id,
    str(outlet),
  ])

def power_command(args):
  """Turn an outlet on or off in a Matter power strip."""

  try:
    if args.on_or_off == 'cycle':
      change_power(args.id, args.outlet, 'off')
      time.sleep(args.cycle_delay)
      change_power(args.id, args.outlet, 'on')
    else:
      change_power(args.id, args.outlet, args.on_or_off)
  except:
    raise RuntimeError('Failed to power {}.'.format(args.on_or_off))


def first_line_docs(thing) -> str:
  return thing.__doc__.strip().split('\n')[0]


def main():
  parser = argparse.ArgumentParser(
      description=first_line_docs(THIS_MODULE))
  subparsers = parser.add_subparsers(
      title='subcommands', dest='command', required=True)

  # Set up a new device
  setup_parser = subparsers.add_parser('setup',
      description=first_line_docs(setup_command))
  setup_parser.set_defaults(command_func=setup_command)
  setup_parser.add_argument('--id', required=True,
      help='Chosen Matter device ID (decimal or 0xHEX)')
  setup_parser.add_argument('--ssid', required=True,
      help='WiFi SSID')
  setup_parser.add_argument('--password', required=True,
      help='WiFi password')

  qr_image_or_text = setup_parser.add_mutually_exclusive_group(required=True)
  qr_image_or_text.add_argument('--qr',
      help='Matter QR code image for setup')
  qr_image_or_text.add_argument('--qr-text',
      help='(Alternative) Pre-parsed Matter QR code text (MT:...)')

  # Turn power on or off
  power_parser = subparsers.add_parser('power',
      description=first_line_docs(power_command))
  power_parser.set_defaults(command_func=power_command)
  power_parser.add_argument('--id', required=True,
      help='Existing Matter device ID (decimal or 0xHEX)')
  power_parser.add_argument('--outlet', required=True, type=int,
      help='Power strip outlet number (decimal)')

  on_or_off = power_parser.add_mutually_exclusive_group(required=True)
  on_or_off.add_argument('--on', dest='on_or_off',
      action='store_const', const='on',
      help='Turn the outlet on')
  on_or_off.add_argument('--off', dest='on_or_off',
      action='store_const', const='off',
      help='Turn the outlet off')
  on_or_off.add_argument('--cycle', dest='on_or_off',
      action='store_const', const='cycle',
      help='Turn the outlet off and then on again')

  power_parser.add_argument('--cycle_delay', type=float, default=2.0,
      help='Delay in seconds between off and on in power cycle (default 2.0)')

  args = parser.parse_args()
  args.command_func(args)


if __name__ == '__main__':
  main()
